package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"test-server/graph/model"

	resty "github.com/go-resty/resty/v2"
)

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id string) (*model.Character, error) {
	apiClient := resty.New()

	resp, err := apiClient.R().
		SetResult(&model.Character{}).
		Get(fmt.Sprintf("https://swapi.dev/api/people/%s/", id))
	if err != nil {
		return nil, err
	}
	character := resp.Result().(*model.Character)
	return character, nil
}

// Planet is the resolver for the planet field.
func (r *queryResolver) Planet(ctx context.Context, id string) (*model.Planet, error) {
	apiClient := resty.New()

	resp, err := apiClient.R().
		SetResult(&model.Planet{}).
		Get(fmt.Sprintf("https://swapi.dev/api/planets/%s/", id))
	if err != nil {
		return nil, err
	}

	planet := resp.Result().(*model.Planet)
	var residents []*string

	for _, url := range planet.Residents {
		resp, _ := apiClient.R().
			SetResult(&model.Character{}).
			Get(*url)
		resident := resp.Result().(*model.Character)
		residents = append(residents, resident.Name)
	}

	planet.Residents = residents
	return planet, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
